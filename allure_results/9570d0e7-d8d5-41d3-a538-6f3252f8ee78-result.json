{"name": "Проверка раздела: «Лента заказов»", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" class=\"Modal_modal__close_modified__3V5XS Modal_modal__close__TnseK\">...</button> is not clickable at point (1261, 74). Other element would receive the click: <div class=\"Modal_modal_overlay__x2ZCr\"></div>\n  (Session info: chrome=125.0.6422.113)\nStacktrace:\n0   chromedriver                        0x000000010494e510 chromedriver + 4302096\n1   chromedriver                        0x0000000104946e58 chromedriver + 4271704\n2   chromedriver                        0x000000010457819c chromedriver + 278940\n3   chromedriver                        0x00000001045bfd48 chromedriver + 572744\n4   chromedriver                        0x00000001045be2ec chromedriver + 565996\n5   chromedriver                        0x00000001045bc47c chromedriver + 558204\n6   chromedriver                        0x00000001045bb9cc chromedriver + 555468\n7   chromedriver                        0x00000001045b0e24 chromedriver + 511524\n8   chromedriver                        0x00000001045b085c chromedriver + 510044\n9   chromedriver                        0x00000001045f2c5c chromedriver + 781404\n10  chromedriver                        0x00000001045af004 chromedriver + 503812\n11  chromedriver                        0x00000001045af9ec chromedriver + 506348\n12  chromedriver                        0x0000000104916558 chromedriver + 4072792\n13  chromedriver                        0x000000010491b004 chromedriver + 4091908\n14  chromedriver                        0x00000001048fd79c chromedriver + 3970972\n15  chromedriver                        0x000000010491b8ec chromedriver + 4094188\n16  chromedriver                        0x00000001048f071c chromedriver + 3917596\n17  chromedriver                        0x0000000104938b50 chromedriver + 4213584\n18  chromedriver                        0x0000000104938ccc chromedriver + 4213964\n19  chromedriver                        0x0000000104946a50 chromedriver + 4270672\n20  libsystem_pthread.dylib             0x00000001833c6f94 _pthread_start + 136\n21  libsystem_pthread.dylib             0x00000001833c1d34 thread_start + 8", "trace": "self = <tests.test_order_feed_page.TestOrderFeed object at 0x1026e2350>\nbrowser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"593d80cec9ebe51d6b3e6171b2549494\")>\n\n    @allure.title('Проверка раздела: «Лента заказов»')\n    @allure.description('при создании нового заказа счётчик Выполнено за всё время увеличивается')\n    def test_new_order_counter_is_increacing_all_time(self, browser):\n        order_page = OrderPage(browser)\n        login_page = LoginPage(browser)\n        login_page.authorize()\n        order_page.click_on_element(mp.ORDER_LIST)\n        all_time_orders = order_page.get_element_text(of.COUNT_ALL_TIME)\n        login_page.click_on_element(MainPageLocators.ACCOUNT_USER_BUTTON)\n        source = login_page.find(cp.BUY_BURGER)\n        target = login_page.find(cp.BASKET)\n        order_page.drag_and_drop_method(source, target)\n        order_page.click_on_element(cp.CLICK_ORDER)\n>       order_page.click_on_element(of.CLOSE_MODAL_WIND)\n\ntests/test_order_feed_page.py:54: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/base_page.py:17: in click_on_element\n    button.click()\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x102746ad0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...0001833c6f94 _pthread_start + 136\\\\n21  libsystem_pthread.dylib             0x00000001833c1d34 thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" class=\"Modal_modal__close_modified__3V5XS Modal_modal__close__TnseK\">...</button> is not clickable at point (1261, 74). Other element would receive the click: <div class=\"Modal_modal_overlay__x2ZCr\"></div>\nE         (Session info: chrome=125.0.6422.113)\nE       Stacktrace:\nE       0   chromedriver                        0x000000010494e510 chromedriver + 4302096\nE       1   chromedriver                        0x0000000104946e58 chromedriver + 4271704\nE       2   chromedriver                        0x000000010457819c chromedriver + 278940\nE       3   chromedriver                        0x00000001045bfd48 chromedriver + 572744\nE       4   chromedriver                        0x00000001045be2ec chromedriver + 565996\nE       5   chromedriver                        0x00000001045bc47c chromedriver + 558204\nE       6   chromedriver                        0x00000001045bb9cc chromedriver + 555468\nE       7   chromedriver                        0x00000001045b0e24 chromedriver + 511524\nE       8   chromedriver                        0x00000001045b085c chromedriver + 510044\nE       9   chromedriver                        0x00000001045f2c5c chromedriver + 781404\nE       10  chromedriver                        0x00000001045af004 chromedriver + 503812\nE       11  chromedriver                        0x00000001045af9ec chromedriver + 506348\nE       12  chromedriver                        0x0000000104916558 chromedriver + 4072792\nE       13  chromedriver                        0x000000010491b004 chromedriver + 4091908\nE       14  chromedriver                        0x00000001048fd79c chromedriver + 3970972\nE       15  chromedriver                        0x000000010491b8ec chromedriver + 4094188\nE       16  chromedriver                        0x00000001048f071c chromedriver + 3917596\nE       17  chromedriver                        0x0000000104938b50 chromedriver + 4213584\nE       18  chromedriver                        0x0000000104938ccc chromedriver + 4213964\nE       19  chromedriver                        0x0000000104946a50 chromedriver + 4270672\nE       20  libsystem_pthread.dylib             0x00000001833c6f94 _pthread_start + 136\nE       21  libsystem_pthread.dylib             0x00000001833c1d34 thread_start + 8\n\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException"}, "description": "при создании нового заказа счётчик Выполнено за всё время увеличивается", "start": 1716838510620, "stop": 1716838514199, "uuid": "58b4a48a-e3bf-461f-83d2-50ce4a2479e7", "historyId": "c833bbe348e7fe1565c49beee853eab1", "testCaseId": "c833bbe348e7fe1565c49beee853eab1", "fullName": "tests.test_order_feed_page.TestOrderFeed#test_new_order_counter_is_increacing_all_time", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_order_feed_page"}, {"name": "subSuite", "value": "TestOrderFeed"}, {"name": "host", "value": "MacBook-Air-Stepan.local"}, {"name": "thread", "value": "24835-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_order_feed_page"}]}